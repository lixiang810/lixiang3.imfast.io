{"meta":{"title":"黎想的博客 (Hexo版)","subtitle":"Hexo版","description":"","author":"黎想","url":"https://stblog.penclub.club","root":"/"},"pages":[{"title":"友链及他人文章收藏","date":"2020-03-02T21:40:06.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"links/index.html","permalink":"https://stblog.penclub.club/links/index.html","excerpt":"","text":"他人文章收藏以下是我看到的一些好文：墙与梯的较量——那些年我们一起用过的翻墙手段 - Yandere@萌注册域名时的注意事项 - 影子屋"},{"title":"梦银的夜夏真吧 2020 年 吧规","date":"2020-06-13T22:02:46.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"nobar/backup.html","permalink":"https://stblog.penclub.club/nobar/backup.html","excerpt":"","text":"正文一．贴吧主题梦银的夜夏真吧提供相对宽松的讨论环境，是以讨论例区文化及国内衍生文化为主，其他国内相关亚文化话题为辅的贴吧。 二．交流守则 理性：做评价注意客观性，列举信息避免片面，合理表达情绪 包容：理解不同吧友所了解信息存在差异，避免苛责、优越感 责任：发帖符合本吧管理标准，为自己的言论负责 三. 吧友的基本权利与自由 本吧规中的“吧友”，是指：在本吧发言且未侵犯其它吧友合法合规权益的百度贴吧用户。 《中华人民共和国宪法》所规定的公民基本权利的自由。并在此之中特别强调： 独立于其他贴吧的权利，在本吧的活动受且仅受本吧吧规约束，不受其他任何圈子的干涉。 (2.1)特别附加解释：本吧吧规与国家相关规定及贴吧规定是继承与包含关系。 独立于其他贴吧的自由。当(2.)所述权利受到侵害时，吧友有自行执行及请求吧务团队执行删封的自由。此自由与对方证据确凿与否，语言得体与否无关。 删除自己楼层与主题帖的自由。 判例所赋予的其他权利及自由。 四. 吧友的基本义务naidesu. naidesu. nai! 五．贴吧管理参考判例-1. 时政帖管理法案0. 引流管理法案 被百度推荐上首页的帖子应自行删除，吧务应及时发现并提醒楼主，吧务同样有权凭证据直接删除。参考情况：(1) 帖子中出现大量低等级账号，发言非本吧风格。(2) 于首页推荐明确发现的（吧务发现/吧友截图）。 一般的处理范围： (1) 删除整帖。 (2) 删除整帖。 1. 删封标准 本吧将删除涉嫌以下类型贴子，列举如下 ①暴力色情等 ②干扰正常讨论 ③人身攻击及嘲讽 ④政治敏感 ⑤无意义贴 吧务组将参考此贴各楼层所列情况决定删除或封禁，如有意见或建议可在贴吧吧规楼中回复，非吧务请勿增加层数。 2. 吧务组 吧务组由热心参与梦银的夜夏真吧建设的普通吧友独立运行，负责维护贴吧秩序。设有讨论群供吧友参与，目前有意入群参与建设或提出意见的吧友欢迎私信本人。 3. 关于暴力色情及令人不适内容的限制 含有强烈的暴力\\色情因素的贴将会被删除，原本这里基本没有这个问题，希望继续保持。此外，虽然这里话题的参与者大多为亚文化爱好者，对猎奇因素的忍受度较高，但过于直接的猎奇创作\\转载仍然会被删除。参考情况：(1) 高等精神病式的p图，器官组合\\旋转图(2) 对玩雪等魔怔行为的直接转载、引流(3) 血腥图、r18图 一般的处理范围： (1) 根据吧友反馈决定是否删除，以劝说为主。 (2) 从删帖到封禁一天。 (3) 从删帖到封禁十天。 4. 关于干扰正常讨论的情况 虽然这里的讨论范围较广，但还是希望来这里的新朋友能参考其他人讨论的话题范围再发帖，参考情况：(1) 发帖回帖参杂大量贴吧表情(2) 主题帖刷屏(3) 碰瓷式提问，在得到帮助后仍对问题\\回答者纠缠不休(4) 反复开小号进行上述行为或对他人造成严重误导 一般的处理范围： (1) 根据吧友反馈决定是否删除，以劝说为主。 (2) 从删帖到封禁一天。 (3) 从删帖到封禁十天。 (4) 封禁十天。 5. 关于规范讨论语言 鉴于起源于音MAD、恶俗以及键政相关圈子的特有的话语体系已经传播甚广，虽然无法完全禁止，但我们恳请各有吧友自觉抵制此类词汇。参考情况：(1) 使用“局的”替代“觉得”，“书”替代“说”，“恁”替代“您”，“本废物/FW/飞舞”替代“本人”(2) 使用侮辱国家和中华民族，烈士及领导人的词汇 一般的处理范围： (1) 一般不会删帖，以自觉为主，请尽量使用国家规范用语。 (2) 初次删帖警告，如果再犯封禁一至十天。 6. 关于人身攻击及嘲讽 由于历史原因，梦吧/之吧存在网络暴力的风俗，这一风俗造成了很大的危害：对内正常沟通会被轻易破坏，对外则产生各种原本可以避免的冲突。为了彻底避免这种环境再次出现在梦吧，这里将不会以范围模糊不清的“恶俗”作为标准，而是更注重以贴子的取乐观念或是营造出的气氛来删封。参考情况：(1) 发帖寻找、炒作新一代网络“丑角”(2) 发帖组织、宣传网络暴力攻击他人(3) 挂人贴或不留讨论余地的评价贴(4) 公布他人隐私或是基于他人隐私信息的讨论(5) 基于双方信息差频繁对他人进行冷嘲热讽、钓鱼(6) 诱导魔怔气氛，混淆用词对人产生误导如：恶俗=高雅，理性劝说=出警(7) 讨论“手表好汉”漫画水平如何 一般的处理范围： (1)-(6) 首次删帖，多次这类言论则封禁十天。 (7) 没有产生(1)-(6)的效应，不会被删帖/封禁。 7. 禁止发布一切时政贴 即日起梦吧禁止一切时政讨论，全面转向不谈国事的茶馆。一切相关讨论请在豆瓣、之吧论坛进行。 参考情况：(1) 讨论香港“国安法”(2) 大量转发微博的美国新闻，引起吧友较大不满(3) 以形式逻辑或公共说理的形式对时下热点的严肃或冷静讨论 处理： (1) 删除并封禁3天。 (2) 删除并封禁3天。 (3) 会被删除。吧友有向吧务请求帖子备份的权利，吧务有对帖子进行备份的义务。 8. 集中楼法案 出于不同目的，吧务和普通吧友会开设各类集中楼。参考情况：(1) 由吧务开设的巧克力粪集中楼(2) 由普通吧友开设的女装集中楼(3) 由普通吧友开设的女装集中楼，经吧务认可后 处理： (1) 在此集中楼外发布的巧克力粪相关内容会被删除。 (2) 在此集中楼外发布的女装内容不会被删除。 (3) 在此集中楼外发布的女装内容会被删除。 9. 吧务中立法案 吧务不得以自己拥有权限的账号表现出特别明显的政治倾向，或发布情绪化内容，若有需要，应以能切割开吧务身份的账号进行。该类内容同样不提倡普通吧友发布。参考情况：(1) 吧务以有权限的账号表现出明显的政治倾向，或大量发布情绪化内容。(2) 吧务以小号进行上述行为。(3) 吧务以小号进行上述行为，被吧友发现是吧务小号、进行指控。(4) 普通吧友发表大量情绪化内容。（≥2帖/周） 处理： (1) 删帖。违背(7.)者同样适用(7.)列举的处罚。涉政次数累计达2次者，取消吧务资格。 (2) 不会删帖。 (3) 删帖。今后该小号进行发言视同用大号发言。 (4) 警告。屡教不改者封禁1天。 六．吧务弹劾流程 待定（屑颜）"},{"title":"梦银的夜夏真吧 2020 年 吧规","date":"2020-06-13T22:02:46.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"nobar/index.html","permalink":"https://stblog.penclub.club/nobar/index.html","excerpt":"","text":"这里和吃吧没有关系，请不要再来了。"},{"title":"新约·阿紫福音","date":"2021-01-29T18:02:46.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"nobar/purple.html","permalink":"https://stblog.penclub.club/nobar/purple.html","excerpt":"","text":"1 愚民1:1 这些愚民都是两千年培养出来的僵尸，跟正常人不是一个物种，他们没有社会性，没有记忆，其他人的死和遭遇，也不会打动他们，因为他们认为达摩克利斯剑扔下来杀的受害者都是别人，不可能杀他们。 1:2 这些愚民的个人历史都是中断的形不成整体 1:3 这些愚民就好比垃圾堆里的垃圾一样，虽然大部分垃圾都不得善终进垃圾箱，但每一个垃圾都很自信觉得自己进不去，他们认为他们是独一无二的垃圾，其他垃圾的整体历史和他们无关 1:4 所以对于愚民不要对他们客气，他们是僵尸不是人 1:5 买房子是愚民的传统文化 1:6 我上大学的时候宿舍也掌握你的一部分学分。有人因为宿舍抽烟被抓，据说判了留校察看。这只能证明，马来要用棍棒和鞭子往死里打，你对他们好，他们就认为你好欺负，直接连你日常工作都不支持了 1:7 官方考虑到了开核的危险所以没有松口，如果她不是因为被非法出道，被公众知悉的话，那她可能现在尸体都找不到了你们都给我记着，这个群体饥饿的时候是会易子而食的，而且专门吃女人小孩弱者，而且他们会编出许多害人的理由出来，就比如图中微博，这个群体是没有任何底线的 1:8 有家有业拖家带口的比是绝对不敢革命的，他要留着自己 DNA，而且呢国农比一盘散沙革命死了也不会有人照顾你家人 2 家庭2:1 外国穷男娶不起老婆不会杀女人，因为外国穷人自生自灭，没人关心他们。而我们这边的区别是，全社会会联合起来对这种人加倍疯狂迫害，再踩上一万只脚的。我们这边的全社会 = 全愚民认为，如果不疯狂迫害单身人群，就不会有人愿意花高价结婚，农业奴隶制传统就不能延续，经济就不能增长。很多岁静会说：“结不起婚没老婆就杀人？底层 ** 心态真差”，其实没结婚并不是没结婚那么简单，当你决定不结婚的时候，你背后已经有大批邪恶的打手眼睛发绿盯上你了。 2:2 狗一样的愚民。我裱子妈基本也是这样，到处跟别的愚民攀比，我工作不好她就会把我当仇人恶狠狠的诅咒我，我工作好，这个比就会到处炫耀，嫌贫爱富，贱到极点。 2:3 你们单身人士不要担心浓鸣靠繁殖民粹操纵着政府抢夺你们的财产，因为在这之前经济就会崩溃，无数的张献忠会把这些多余的癌细胞摧毁 2:4 县中杀女也是反婚，抗婚行为的一种 2:5 我母亲就是个秾必愚民加粉红，C 国，虽然大部分老彼养的都声称 “养儿方知父母恩”，说自己多么辛苦，但实际上渔民们的养育水平是很低的，很多龙笔家长照顾孩子的动作都很粗暴把孩子弄疼了都不知道。在 C 国，你可以听到婴儿鬼哭狼嚎的尖叫哭声，他们很早时候就染上了戾气，C 国的出生环境充满了野蛮，丛林，无序和粗放和暴力而且没有任何人文关怀和道德可言。发达国家即使是贫民窟穷人家小孩依旧眼神是纯净的能玩小游戏玩很久。现在教育环境要比以前好的多了，还有媒体报道。以前小学中学统统都是这种民间暴力恐怖的野蛮环境。 2:6 这里所有的人都得记着，出去只能靠自己，家里人跟你们是两个对立的阶级 3 共同体3:1 越是穷人，越应该抛弃自己的共同体 3:2 穷人之所以穷主要原因是原生共同体（父母，老乡，民族）坏，被共同体坑害了，因此穷人应当到高度自由，没有人情关系，不排外的地方去生活。按无种族社会的规则去获取利益去过新的生活。例如各大国际城市。富人脓匕保守是应该的因为他有巨大的关系网。共同体是有优劣之分的，坏的团体不如没有团体。 3:3 而且优质学历还可以改变你的平台到不那么内卷的环境里面，你是一个垃圾公务员，如果你考了北大研究生，你再出来就不属于你原来的单位圈子了会到非常宽广的地方去 3:4 有很多坏地方他的上升空间非常狭窄，所以人和人的关系非常龌龊，丑恶，拍马，倾轧，潜规则各种低端黑手，而富裕地区你不做这些，过的仍然比那些坏人要好。你想当好人必须高学历，如果你学历低又不肯做恶，你恐怕就要被淘汰了。 3:5 想改变远期的阶层和平台的人，一般都是好人，一旦成功了，你将会得到那些坏人，在基层干尽了坏事削剑了脑袋也得不到的好处。而且，正因为这些改变是踏实的是真功夫，他不需要干坏事走后门不需要作恶，而你如果在基层必须作恶 4 阴谋4:1 憋是个黑箱封闭社会，大部分憋人都是被控制信息知悉的，真正的重要消息只有施一公才知道。网民都是不能获取消息的阶层。 4:2 现在经济肯定已经崩溃了，但是崩溃到什么程度，各个行业经营的困难程度，每天有多少献忠产生，不好意思你看不到，全是兔子假消息刷屏在舆论镇压，如果有人试图发布或者讨论这些消息他肯定要炸号。但是，这些信息对于体制外来说，却又是非常重要的。 4:3 萌萌人其实都是特殊舆论人员，都有特定目的的。相当于黑恶势力，根本不是普通网民，而且是五毛和正常人比例99：1 4:4 言论审核逼出来的结果…… 现在的审核员非常歹毒，你干货知识一多就会山峰你（纯粹的知识分析没有任何政治问题），摆明了要搞愚民政策 4:5 学术教育代表客观性的知识，而复杂的客观性的知识只能由专业人员掌握，社会学法学更需要真实的社会经历，所以知识代表真善美和人治是对立的 4:6 正常人作为决策者可能会尝试降低大学录取让大多数人考不上大学以缓解高端就业，鳖不，鳖加紧研究生毕业门槛让你不能轻易毕业，也就是钱要交，但毕不毕业我说了算 4:7 20年前你考上名校研究生相当于中进士，考虑的是如何当官的问题了，我市的市长就是这么起家的，他考上了北大研究生回来就分在省委办公室从此仕途起飞。 4:8 大学生在8090年代还是稀有资源。稀有到什么程度？参加了暴徒的学生被计入档案，发配到比较弱权的施一公单位，他们的很多人从此过上了岁静的小富即安的生活，甚至有的还当了小官。和8090年代一些演员一失势就脱脂去欧美一样，你那叫“失势”吗？那时候能脱脂的都是什么人？？这种“失势”普通瘪民包括我在内是不是打破头都想要？ 4:9 在互联网审核人员被县中之前你拿一点办法都没有。互联网杀人都不见血的，你还不知道审核员害你的人是谁。除非搜查服务器 5 农民5:1 农鸣出身，有农民恶劣习俗的，必须一票否决的绝对不能要 5:2 秾比对国家富强的理解还停留在弄比时代，盛世就是人口繁衍众多，人口本身就是他们认为的国家的一种，尤其是第三世界国家，白左给了他们大量药品，然后他们就按照他们理解的那个方式大量膨胀人口。大清的乾隆盛世有三亿人，按他们的标准这就是盛世了。虽然这三亿穷人乞丐都不如。至于人口满了不够生活怎么办？他们的字典里面是没有这个概念的。现代社会很多概念秾冥是不可能理解的，因为脓冥的生活是一个死循环。 6 施一公6:1 楼上所有的回复显然都是温和中国人，肯定是施一公，或者施一公家子女。你们去医院看过病没有？你们体会过没有社保，看不起病，害怕自己得病的恐惧吗？你们照顾过病痛的人吗？ 6:2 大部分所谓大资本家，都是资不抵债的。他们看起来豪车，别墅，高尔夫，有钱，但他们的公司真实财务极差，早就收不抵支了，哪天捂不住了就得跑路。很多上市公司都是这样，千疮百孔，到处都是亏损，全身插满了吸管。财务状况真正富裕的人，是施一公。体制内按官位级别，逐级确定富人的档次。 6:3 公务员们是不可能放松压榨的，他们也有家小有业有房贷开支大得很，所以，最后一定会到生死决斗的阶段 6:4 爆个人秘密信息的这种玩法不是一般人想弄就能弄的，要有网警、掌握个人信息的施一公们做内应，因为不是什么人都能上下的，这些人能买通网警辅警作内鬼，意味着你的信息泄露了，这是最恐怖的地方。 7 自由7:1 即使在完全无政府大家起点都一样的牧田社会里面，癌细胞也是不断产生的，而且正常社会因为 “自由”，它允许癌细胞存在不可能去杀。随着时间的增长，癌细胞越来越多最终发展成为癌症。而且癌细胞携带的癌基因是人体必须的你不能把他基因除掉。此是目田社会永远也不可能建成的根本原因。 7:2 真正的三权分立是议会最大，立法机关 &gt; 司法机关 &gt; 政府机关。尤其是释宪权，这个绝对不能给最高法院。比如最高法院就某个案件是否违宪出了一个判例，议会应该有一个监督程序，审查法院司法有没有超出议会规定的法律的意思范围，如果有，则可以撤销法院的判决，命令其重新审理，但实践中美国的高院是有最终解释权的，议会除了修仙基本上无法推翻。这点是个教训。那有人说要是议员也被买通了怎么办？那说明你们国家不适合民主 7:3 鼠人无权评论美国大选。不管你是兔媒，还是黄川粉，黄左，你都应当知道，白左和白右之一都能碾压兔，他们内部斗争的成本，将全部由兔来承担。兔如果不愿意承担，就抓兔的 DNA。 7:4 特吧有人发过的，越南相当于早期的特色，只搞经改不搞政改，具有很强的欺骗性，而低端公知为了恶心莂会吹越南走邪路 8 杂论8:1 这不是段子是真的，新的广告法刚刚生效 “最什么”， “必备什么”，都是禁止使用的 8:2 乐子人就是兔，人人得而诛之 8:3 军人是杀人机器很你想象中的英雄很远 8:4 孙悟空猎不得的，00 版西游有孙悟空一怒之下虐杀一堆强盗的武打视频 8:5 小克劳斯和大克劳斯“她的价值倒是不少呀！”大克劳斯说。于是他马上回家去，拿起一把斧头，把自己的老祖母砍死了。"},{"title":"我是中国特色社会主义者","date":"2021-01-29T18:02:46.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"nobar/sfoh.html","permalink":"https://stblog.penclub.club/nobar/sfoh.html","excerpt":"","text":"我是中国特色社会主义者经常有人猜测我的立场是什么，而我也热衷于进行各种各样的表演，但今天我终于被拆穿了。所以让我顺势来揭晓谜底吧：我的屁股很正，我是中国特色社会主义者。 两张图片懒得放，建议回原帖。 注：ddldg：打倒老大哥 首先站起来向我吐口水的应该是老毛左吧。尽管我对他们的大跃进、文化大革命和计划经济比较厌恶，因为这样的东西绝不应该在中国大地上再次出现。但我觉得他们功过应该六四开，我的主要敌人不是他们，所以我相信我们的误会是可以被解除的。 我最反感的是公知和恨国党，他们收了煽动颠覆势力的钱，要颠覆我们的政府，好给自己的美国主子延续霸权。他们的很多言论其实都只是城市居民，也就是小市民的既得利益受损以后发的牢骚，实话实说吧，我当然也是城市居民，而且我也确实感觉到这几年的变化，然而我们不能忽视了农村，因为农村在前面几十年确实牺牲了太多，现在是我们的政策向农村倾斜的时候了。 当然，我也讨厌从上面这些人衍生出来的新左派。我真的很不喜欢他们的那种所谓“国际主义”的做派，这一点上他们要向毛左学习，因为他们没有经历过那个落后挨打的年代。我们不妨设想一下吧，假如有哪一天中国在制裁之下走上了日本那样的经济衰退道路，来个失去的三十年，那么我们的生活难道会比现在更幸福吗？不要直到这个时候才知道“没有祖国你什么也不是”的道理。 这些所谓的国际主义者还不知道排外是人类的天性。不论客观上阶级差异是否盖得过民族差异，事实上的民族矛盾就是盖过阶级矛盾的。不信就请到美国锈带区走一走，懂英语的话甚至可以向本土工人宣传，然后看看他们对你是什么态度。只有真正体验到那种在异族面前抬不起头的感觉，才能真正爱自己的民族、爱自己的国家。 作为中国特色社会主义的拥护者，我发现它被嘲讽得最厉害的就是政策的反复摇摆——比如说今天和日本闹掰，明天签个RCEP又马上引进日漫。一些自称特色社会主义者的人表现很幼稚，而且也因此招致各路人士的嘲笑。他们和嘲笑他们的人都不懂，这是政府在下大棋——和日本闹掰后煽动民族主义是给自己增加谈判的筹码，引进日漫是展现自己的诚意——总之，这些事情国家都比你我更懂，我们不需要妄议，只要等待国家给出结果，然后欣然接受就好了——最后的结果一定是我们和大多数国民都称心如意的。适用上述道理的还包括移民问题。一些人因为国家向移民的政策倾斜就否定国家政府，这大错特错了，因为这才是真正的国际主义——好好看看天安门城楼右边那行字是什么吧！什么是世界人民大团结？这就是世界人民大团结。 还有一个基本事实是所有反对者都不能忽视的：中国是过去几十年经济增长最快、发展速度最快、社会进步最大的国家。因为良好的社会治理体系，罪犯几乎销声匿迹。毫不夸张地说，我国是世界上最安全的国家。 你们可能注意到了，我一直没有谈我国在抗疫过程中的表现。这种东西别人讲得太多，你们爱无视就无视吧，我也懒得再讲一遍了。 总之，一直跟着我的人们，很抱歉今天让你们听到了这些话。如果你们觉得我说的很恶心，你们可以取关了。不过这都无所谓了，你们看到这篇文章的同时，我已经向相关部门举报波组，几天以内结果就会出来。各位，永别了。"},{"title":"Mozilla牌pdf阅读器","date":"2020-08-24T00:02:46.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"pdfv/index.html","permalink":"https://stblog.penclub.club/pdfv/index.html","excerpt":"","text":"测试文档"}],"posts":[{"title":"","slug":"test","date":"2021-06-29T03:58:28.219Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"2021/test/","link":"","permalink":"https://stblog.penclub.club/2021/test/","excerpt":"","text":"Hexo++测试","categories":[],"tags":[]},{"title":"模块化你的GraphQL Schema代码","slug":"graphql","date":"2021-04-04T11:00:00.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"2021/graphql/","link":"","permalink":"https://stblog.penclub.club/2021/graphql/","excerpt":"随着 GraphQL 应用程序从演示、概念验证到生产的发展，Schema 和 resolver 的复杂性也会随之增长。为了组织代码，我们可能需要将 schema type 和相关的 resolver 分割成多个文件。","text":"随着 GraphQL 应用程序从演示、概念验证到生产的发展，Schema 和 resolver 的复杂性也会随之增长。为了组织代码，我们可能需要将 schema type 和相关的 resolver 分割成多个文件。 我们经常收到这样的问题，因为有很多不同的方法来拆分 schema 代码，而且也许看起来你需要复杂的设置来获得好的结果。但事实证明，只需要几个简单的 JavaScript 概念，就可以将 schema 和 resolver 代码分离到单独的文件中。 在这篇文章中，我们介绍了一种直接的方法，对用 graphql-tools构建的 schema 进行模块化，你可以进行调整，以适应自己的喜好和代码库的风格。 Schema如果你刚刚起步，并且在一个文件中定义了你的整个Schema，它可能看起来很像下面的片段。在这里，我们称它为schema.js。 // schema.js const typeDefs = ` type Query &#123; author(id: Int!): Post book(id: Int!): Post &#125; type Author &#123; id: Int! firstName: String lastName: String books: [Book] &#125; type Book &#123; title: String author: Author &#125; `; makeExecutableSchema(&#123; typeDefs: typeDefs, resolvers: &#123;&#125;, &#125;); 理想情况下，我们不想把所有的东西都放在一个schema定义字符串里，而想把Author和Book的schema类型分别放在名为author.js和book.js的文件中。 我们在Schema定义语言（SDL）中编写的schema定义只是字符串。对它们，我们有一个简单的方法来导入不同文件中的类型定义——把字符串分割成多个字符串，之后进行组合。这是author.js在进行上述处理后应该的样子： // author.js export const typeDef = ` type Author &#123; id: Int! firstName: String lastName: String books: [Book] &#125; `; 而book.js应该是这样： // author.js export const typeDef = ` type Author &#123; id: Int! firstName: String lastName: String books: [Book] &#125; `; 最后，我们在schema.js中把它们整合起来： // schema.js import &#123; typeDef as Author &#125; from &#39;./author.js&#39;; import &#123; typeDef as Book &#125; from &#39;./book.js&#39;; const Query = ` type Query &#123; author(id: Int!): Post book(id: Int!): Post &#125; `; makeExecutableSchema(&#123; typeDefs: [ Query, Author, Book ], resolvers: &#123;&#125;, &#125;); 我们在这里并没有做任何花哨的事情：我们只是导入恰好包含SDL的字符串。请注意，为了方便，你不需要自己组合字符串——makeExecutableSchema实际上可以直接接受一个类型定义的数组，以适应这种方法。 Resolvers现在，我们已经有办法将 schema 分解成各个部分，但我们还希望能够将每个 resolver 与对应 schema 相关的部分一起移动。一般来说，我们会需要把某个 schama 的 resolver 与该 schema 的模式定义保存在同一个文件中。 在上一个例子的基础上进行扩展，这是我们的schema.js文件，其中增加了一些resolver。 // schema.js import &#123; typeDef as Author &#125; from &#39;./author.js&#39;; import &#123; typeDef as Book &#125; from &#39;./book.js&#39;; const Query = ` type Query &#123; author(id: Int!): Post book(id: Int!): Post &#125; `; const resolvers = &#123; Query: &#123; author: () =&gt; &#123; ... &#125;, book: () =&gt; &#123; ... &#125;, &#125;, Author: &#123; name: () =&gt; &#123; ... &#125;, &#125;, Book: &#123; title: () =&gt; &#123; ... &#125;, &#125;, &#125;; makeExecutableSchema(&#123; typeDefs: [ Query, Author, Book ], resolvers, &#125;); 就像拆分schema定义字符串一样，我们也可以拆分resolvers对象。我们可以把其中的一部分放在author.js中，另一部分放在book.js中，然后导入它们，并使用lodash.merge函数把它们在schema.js中进行组合。 这是author.js会变成的样子： // author.js export const typeDef = ` type Author &#123; id: Int! firstName: String lastName: String books: [Book] &#125; `; export const resolvers = &#123; Author: &#123; books: () =&gt; &#123; ... &#125;, &#125; &#125;; 而book.js应该变成这样： // book.js export const typeDef = ` type Book &#123; title: String author: Author &#125; `; export const resolvers = &#123; Book: &#123; author: () =&gt; &#123; ... &#125;, &#125; &#125;; 然后，在schema.js中用lodash.merge把它们组合在一起： import &#123; merge &#125; from &#39;lodash&#39;; import &#123; typeDef as Author, resolvers as authorResolvers, &#125; from &#39;./author.js&#39;; import &#123; typeDef as Book, resolvers as bookResolvers, &#125; from &#39;./book.js&#39;; const Query = ` type Query &#123; author(id: Int!): Author book(id: Int!): Book &#125; `; const resolvers = &#123; Query: &#123; ..., &#125; &#125;; makeExecutableSchema(&#123; typeDefs: [ Query, Author, Book ], resolvers: merge(resolvers, authorResolvers, bookResolvers), &#125;); 这样重构以后的结构与我们一开始的resolvers结构是完全等价的。 扩展类型我们仍然在schema.js中把authors和books定义为Query上的顶层字段，然而，这些字段在逻辑上是与Author和Book联系在一起的，它们应该被放在author.js和book.js中。 为了达到这个目的，我们可以使用类型扩展。我们可以这样定义现有的Query类型： const Query = ` type Query &#123; _empty: String &#125; extend type Query &#123; author(id: Int!): Author &#125; extend type Query &#123; book(id: Int!): Book &#125; `; 注意：在当前版本的GraphQL中不能使用空类型，即使你打算在程序的其余部分扩展它。所以我们需要确保原来的Query类型至少有一个字段——在这种情况下，我们可以添加一个假的_empty字段。在未来的GraphQL版本中，我们也许可以使用空类型，然后在程序的其余部分进行扩展。 基本上，extend关键字让我们可以为已经定义的类型添加字段。我们可以使用这个关键字在book.js和author.js中定义与这些类型相关的Query字段。然后我们还应该在同一个地方为这些类型定义Query resolver。 下面是这样以后author.js的样子： // author.js export const typeDef = ` extend type Query &#123; author(id: Int!): Author &#125; type Author &#123; id: Int! firstName: String lastName: String books: [Book] &#125; `; export const resolvers = &#123; Query: &#123; author: () =&gt; &#123; ... &#125;, &#125;, Author: &#123; books: () =&gt; &#123; ... &#125;, &#125; &#125;; 这是book.js的样子： // book.js export const typeDef = ` extend type Query &#123; book(id: Int!): Book &#125; type Book &#123; title: String author: Author &#125; `; export const resolvers = &#123; Query: &#123; book: () =&gt; &#123; ... &#125;, &#125;, Book: &#123; author: () =&gt; &#123; ... &#125;, &#125; &#125;; 我们在schema.js中把它们组合到一起，就像前面那样： import &#123; merge &#125; from &#39;lodash&#39;; import &#123; typeDef as Author, resolvers as authorResolvers, &#125; from &#39;./author.js&#39;; import &#123; typeDef as Book, resolvers as bookResolvers, &#125; from &#39;./book.js&#39;; // If you had Query fields not associated with a // specific type you could put them here const Query = ` type Query &#123; _empty: String &#125; `; const resolvers = &#123;&#125;; makeExecutableSchema(&#123; typeDefs: [ Query, Author, Book ], resolvers: merge(resolvers, authorResolvers, bookResolvers), &#125;); 现在，schema和resolver的定义与相关类型终于被放在一起了。 最后的建议我们刚刚经历了服务器代码模块化的机制。这里有一些额外的提示，可能会对你了解如何划分代码库有所帮助： 在学习、原型设计甚至构建POC时，将你的整个schema放在一个文件中可能是不错的。这样做的好处是可以快速浏览整个schema，或者向同事解释。 你可以按照功能来组织你的schema和resolver：例如，把与结账系统有关的东西放在一起，在电子商务网站中可能是有意义的。 将resolver与相关的schema定义保存在同一个文件中。这将使你能够有效地对你的代码进行管理。 使用graphql-tag将你的SDL类型定义用gql标签包装起来。如果你的编辑器使用GraphQL Plugin或Prettier对代码进行格式化，只要在SDL的前缀加上gql标签，编辑器中就能有对应的语法高亮。","categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"https://stblog.penclub.club/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"如何编译Mozilla Firefox","slug":"firefox","date":"2021-01-02T17:25:20.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"2021/firefox/","link":"","permalink":"https://stblog.penclub.club/2021/firefox/","excerpt":"如何编译Mozilla Firefox","text":"如何编译Mozilla Firefox 文章大部翻译改编自： https://firefox-source-docs.mozilla.org/contributing/contribution_quickref.html https://davidwalsh.name/how-to-build-firefox 这个过程中的某些部分，包括clone和编译，即使在现代硬件上也会花费很长的时间。如果遇到困难，任何时候都不要犹豫，去https://chat.mozilla.org的#introduction 频道问出来。当然，你得懂英文。 使用的大部分软件仓库都由Mozilla管理（并且没有镜像源），尽管并非完全无法访问，中国大陆用户依旧可能需要一定的网络加速服务及镜像源，在此简单介绍一下。 Linux用户代理软件：cgproxy+任何socks5/http代理均可。cgproxy使用方法请自行查找GitHub同名项目，当然，得懂英文。 镜像源：除了Linux发行版软件源以外，编译过程中还会用到pip的软件源，因此请逐一设置好镜像源。镜像源的作用是加速安装编译依赖的过程，而并不能对其余大多数过程起加速作用。 除了Debian系和RedHat系以外的发行版应该也能进行编译，比如我的Archlinux就成功搞定了全过程。尽管如此，我推荐新人使用Ubuntu或其衍生版（kubuntu等） clone源码首先你需要安装Mercurial，canonical编写的版本管理系统。安装方式视你的发行版而定，对archlinux用户而言应该是这样： sudo pacman -S mercurial 其实用Git也可以，但我懒得写了。人家这么推荐就这么用吧。 然后 hg clone https://hg.mozilla.org/mozilla-central/ 克隆可能需要10分钟到几个小时（取决于你的连接速度），clone下来的仓库应该小于5GB，但构建后可能会占用约20GB的空间，请先确保你有这个空间。我在2021年1月2日编译后占用的大小是20.4GB。除此以外，编译器等编译依赖也需要一定的空间，因此30GB的剩余空间会是一个比较保险的条件。 安装依赖（Linux/Mac）cd mozilla-central ./mash bootstrap 推荐使用默认选项（也就是一路回车）。 安装依赖（Windows） 你需要64位的Windows7或更新的系统。 下载并安装Visual Studio Community Edition。 下载MozillaBuild。默认安装目录是C:\\mozilla-build 进行下一步操作前，请确保你完成了这些要求（比这篇教程还长了，不翻译）。 此后的命令你需要在mozilla-build环境里执行，也就是打开C:\\mozilla-build\\start-shell.bat再在里面输命令。 使用预编译组件以加速编译如果你不打算对Firefox的C++或Rust部分进行开发，那么你可以采用如下步骤以大大缩短时间（前提是你有网络加速服务）： 用顺手的编辑器在mozilla-central目录下新建mozconfig文件。 输入如下内容 # 自动下载编译好的C++组件: ac_add_options --enable-artifact-builds # 将组件放进一个文件夹: mk_add_options MOZ_OBJDIR=./objdir-frontend 编译与运行当你完成了上述步骤，用如下命令来检查依赖关系并开始编译。这将需要一段时间：从几分钟到几个小时不等，取决于你的配置和网速。 ./mach build 这以后，用这个命令来运行你编译好的Firefox： ./mach run 大功告成。 我的编译用时先说说我的电脑配置： ROG玩家国度 魔霸新锐 CPU：Intel i7-10875H GPU：NVIDIA RTX2060 RAM：16GB 操作系统：Archlinux 桌面环境：KDE Plasma 测试时间：2021年1月2日 内存占用最高达8G，全新编译用时17分34秒。","categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"https://stblog.penclub.club/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"帝国主义化的互联网——互联网产出萎缩的根本原因","slug":"imperialism","date":"2020-08-17T10:27:06.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"2020/imperialism/","link":"","permalink":"https://stblog.penclub.club/2020/imperialism/","excerpt":"本文备份自豆瓣（原文已被仅个人可见）","text":"本文备份自豆瓣（原文已被仅个人可见） 先来道开胃菜：论坛与微博的差别 现存网络社区基本分为两种形式：论坛与微博。 论坛里，用户开出一个帖子，然后其它用户在这个帖子下进行公共讨论。在这种形式下，内容与用户的关系并不如微博那样紧密。因此，我们说：论坛，是面向观点的社区系统，更偏重观点本身而非观点的发布者。 与之相对地，微博系统，其实就是增加了转发、点赞与关注功能，并将内容本身弱化的博客系统。在一个典型的微博中，用户关注一个博主，然后再接收该博主的内容推送。在“现代化”的微博系统中，运营方还将使用算法推送其它博主的内容，但用户关注始终是重要推送判据、始终是微博展现内容的主要成分。因此，我们可以说，微博，是面向人的社区系统，更偏重观点的发布者而非观点本身。 这些东西，这篇文章应该讲得比我清楚很多，最好直接阅读它，而不是就听我只言片语： 《我对微博客的理解》 by 无影人 那么我进入正题：我们的言论自由，以及言论自由的推广，或者说，我们的数据权利，为什么不能得到保障？为什么中文“互联网”，甚至世界互联网的产出都在萎缩？ 知乎有个问题：中文互联网的产出在渐渐枯萎吗？ 答案们普遍都只能看到表象，只能看到言论管控、限流、平台争斗，却没有看清楚背后的本质，即“互联网”与互联网均已进入垄断阶段，或者说，帝国主义阶段。 稍有“互联网”经验的人都清楚，在绝大多数时候，所谓的用户，对其产出的内容，都没有所有权，因为平台方掌握、控制了一切。在现代的平台-用户框架以内，内容一经用户发布，用户就失去了对其产出的最高权限，而只保留“经审查的修改”等少部分权限，与之相对地，平台对内容可以说有最高权限，包括但不限于引流、限流、删除、修改、再分发。比如中国互联网时代前中期，B站用户为B站产出了大量内容，而在2018年8月开始的风暴中，这些内容被悉数削除或限流。前些日子，百度贴吧突然不允许访问2017年以前的内容，而百度贴吧有价值内容产出的黄金时期却正好就在2017年以前。对于这些内容，百度说屏蔽就屏蔽，说不放出来就不放出来，甚至至今对前因后果语焉不详。无数经典就此毁于一旦。 对于用户的数据权利，唯有欧盟的《通用数据保护条例》（GDPR）能提供差强人意的保护，其声明了许多我们可以说是闻所未闻的数据权利，包括但不限于访问权、更正权，尤其是可携权，即：用户在需要时，有将自己产生的数据取出并转移的权利。可以说，不是《通用技术保护条例》，我甚至不知道我可以有这些权利。 而某些国家通过一部类似GDPR的法律的可能性近乎为零。强有力的中后期资产阶级专政，不会允许资产阶级的权利受侵犯。资产阶级法权同样渗透在互联网的相关法规中：事实上，它只保护平台占有数据的权利，却不保护用户占有数据或浏览数据的权利。特别地，在某些国家言论管控的大背景下，官僚垄断资产阶级与互联网垄断资产阶级有意无意地结成罪恶的同盟：互联网资本家们负责纵横捭阖、以经济手段挤垮小平台，将流量集中在几个寡头身上，垄断用户与数据；官僚资本家们负责翻云覆雨、以行政手段关停小平台，将流量集中在几个寡头身上，让寡头垄断用户与数据。 对于千方百计垄断下来的用户与数据，官僚资本家和互联网资本家们各自有各自的用法：官僚资本家利用垄断得来的用户与数据辅助资产阶级专政，而互联网资本家们则利用垄断得来的用户与数据为自己谋取利润，无论是谁，都不可能对数据，抑或用户，有些许的“尊重”。 对官僚资本家来说，被垄断的用户与数据，能极大便利化网络审查，加强资产阶级专政。打个比方：以前为了封锁一条消息，需要审查 100 家以上的分散的论坛，而现在只需要在微博微信等垄断性平台部署审查系统就可以将大量消息几乎堵死。2018 年，官僚资本家们突然要求论坛全部实行实名制，直接导致了境内一众小论坛的迁移甚至关停，也直接造成了中文互联网“户籍满天飞”的现状。 而互联网寡头们之间也存在一定的竞争，在种种因素的要求下，他们纷纷开始水平整合、垂直整合，大搞名为“生态链”的康采恩甚至托拉斯，画地为牢，宰割山河，互联网或者“互联网”这个概念已近摆设，取而代之的是一个个厂商自己的圈子，它们不对外开放，也不对通用搜索引擎开放——搜索引擎也被整合进了“生态链”中，成为专用搜索引擎，生态链的一环。举个例子，百度会在搜索结果里优先推荐自己的“百家号”，而微信公众号内容不可被微信以外的搜索引擎检索。又比如，Android 系统的主题、字体、图标本来是通用的，华为小米等公司的 Launcher （可以理解为手机桌面）却不允许应用第三方主题、字体和图标，只允许用户使用自家主题商店上面的主题。这当然可以解释为“方便收费，方便回馈作者”，然而 Google Play 上也同样有大量收费主题，只是不像华为小米主题商店上面的主题那样只能给自家手机用。当然可以再狡辩说“厂商对 Launcher 有修改，第三方主题无法应用”，但图标呢？字体呢？圈起地了就是圈起地了，不开放就是不开放，任何借口都不能掩饰互联网垄断公司们宰割山河、圈住用户的欲望。他们力图让用户的所有需求都在自己的“生态链”里解决，从而获取比对手更大的竞争优势。 从以上几点，我们不难得出结论：互联网的垄断组织已经形成并确立，我们可以说，互联网与“互联网”，已经进入了垄断资本主义时代，也即帝国主义时代。高强度的审查、对流量的争夺、用户权利的损害、平台的膨胀，所有的一切，都是这个帝国主义阶段的副产物。 曾经以便于转发著称的微信、曾经大大提升了信息传播便利性的微博，现在都因为这落后的生产关系而走到了它们的反面：曾经便于转发的微信现在不停地禁止转发、曾经提升了信息传播便利性的微博现在在以限流和撤热搜等手段阻碍信息传播。这样的现象就是异化。我在别的地方说过，现阶段的生产关系压根配不上互联网这样的生产力。于是旧的生产关系会扼杀、会异化先进的生产力，在以前是封建生产关系抑制工业生产力，在这里是资本主义生产关系阻挠互联网生产力。工业党们那形而上学的生产力-生产关系观，在这里，不攻自破。","categories":[],"tags":[{"name":"随想","slug":"随想","permalink":"https://stblog.penclub.club/tags/%E9%9A%8F%E6%83%B3/"},{"name":"分析","slug":"分析","permalink":"https://stblog.penclub.club/tags/%E5%88%86%E6%9E%90/"}]},{"title":"Hexo-theme-Sakura折腾日记（1）","slug":"Sakura","date":"2020-06-13T22:02:46.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"2020/Sakura/","link":"","permalink":"https://stblog.penclub.club/2020/Sakura/","excerpt":"如何获得一个匿名免翻墙评论区？","text":"如何获得一个匿名免翻墙评论区？ 我的solo博客 我的hexo博客 为什么要魔改 Sakura 实名与匿名是一种抉择。让利维坦手中握住更多的信息也许能带给大多数人安全，却同样会伤害异见者。而事实证明，异见者并不总是出于恶意动机。何况“对事不对人”“针对观点而非质疑动机”也是公共说理的基本素养。然而，有一些国家的政府却不允许任何匿名性的存在，无论是纸质出版的匿名性还是网络的匿名性。 近年来，在这些国家中的一个国家，新兴的垄断巨头与政府相勾结，垄断巨头负责挤垮小平台进而集中用户（这个过程是自由资本主义转为垄断资本主义，也即帝国主义的必然），而政府则可以方便地对这些已经自愿或因大多数人的自愿而被迫集中起来的人进行集中管理（这却是偶然——法德等大多数西欧国家是反例）。该国网络的匿名程度很低，然而，网络犯罪却不见得因此减少：巨头和政府有办法拿到公民的个人信息，另一些个人就有办法从巨头和手里把它们购买或盗窃出来。恶俗维基的存在以及恶俗维基上面满天飞舞的户籍就是证明——小如未成年人大如刘慈欣，只要把自己的信息交予利维坦，就不要指望别人不知道，特别是在这单凭手机号就足够把人翻个底朝天的时代。刘慈欣的小号被发现，就是从其绑定的手机号着手，发掘出了支付宝号、身份证号等信息，从而让恶俗人士一步步锁定目标。 这一点上， Sakura 采用的 Valine 评论系统令我胆战心惊：部署 Valine 的后端，竟需要进行身份证实名认证！作为亲眼目睹公权力对本人学校里异见者迫害，甚至自己也险遭卷入的人，毫无疑问地，我很害怕。万一哪天我心血来潮作了死（如“不存在的人”、“不存在的人”和“不存在的人”），或者无意之间说了一些不能说的东西（李医生等人就是例子），那岂不是训诫往上起步？虽然公权力找到我的身份易如反掌，但我不想主动投怀送抱。万一触怒了恶俗系的残留势力，那岂不是全家户籍都要被挂出去？虽然有心者还是可以从这个博客里找到我真人的蛛丝马迹，但我不希望他们只花5块钱查个社工库就做得到。 为什么使用 gitalk 毫无疑问地，拒绝追踪的评论系统在这个国家已经死绝了。如果没有，那么也不是我能找到的。于是我首先考虑了 disqus 。然后我发现它的服务器被墙了。囧rz。 最后我选择了 gitalk ，它是一个利用 github issues 作为后端的评论系统。 Hexo-theme-Nexmoe 有自带，但我更喜欢 Sakura ，然而 Sakura 目前仅支持 gitalk 。 使用 gitalk ，是因为 github 短期内不会被墙。作为全世界最大开源平台，并且有微软这样与这国家合作的公司的加持， github 被墙的可能性不能说没有，但短期内我们仍可拥有“依附的自由”。 于是我开始了魔改。 尝试与失败过程 先咕着。（屑颜） 最终进行的修改 先装 gitalk （不确定这一步是否必须） $ npm install gitalk --save 然后修改themes/Sakura/layout/_partial/comments.ejs，以下是修改后的文本： &lt;!--这一堆是原内容，我全部注释了 &lt;% if (theme.valine &amp;&amp; post.comments) &#123; %&gt; &lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt; &lt;script&gt; window.onload = function()&#123; var valine = new Valine(); valine.init(&#123; el: &#39;#vcomments&#39;, appId: &quot;&lt;%= theme.v_appId %&gt;&quot;, appKey: &quot;&lt;%= theme.v_appKey %&gt;&quot;, path: window.location.pathname, placeholder: &quot;你是我一生只会遇见一次的惊喜 ...&quot; &#125;) &#125; &lt;/script&gt; &lt;% &#125; %&gt; --&gt; &lt;!--以下是正文，懒得改别处，就把原来的if照搬了过来--&gt; &lt;% if (theme.valine &amp;&amp; post.comments) &#123; %&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;&gt; &lt;div id=&quot;gitalk&quot;&gt;&lt;/div&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/blueimp-md5@2.12.0/js/md5.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var gitalk = new Gitalk(&#123; clientID: &#39;&lt;%= theme.gitalk.clientID %&gt;&#39;, clientSecret: &#39;&lt;%= theme.gitalk.clientSecret %&gt;&#39;, id: md5(location.pathname), repo: &#39;&lt;%= theme.gitalk.repo %&gt;&#39;, owner: &#39;&lt;%= theme.gitalk.owner %&gt;&#39;, admin: &#39;&lt;%= theme.gitalk.admin %&gt;&#39; &#125;) gitalk.render(&#39;gitalk&#39;) &lt;/script&gt; &lt;% &#125; %&gt; 最后修改themes/Sakura/_config.yml： # Valine valine: true #v_appId: ############ #v_appKey: ############ gitalk: admin: 我的名字 # 拥有对该repo进行操作的 GitHub username owner: 我的名字 # 持有该 repo 的 GitHub username repo: 我的 repo # 存放评论的 issue 所在的 repo clientID: 我的 Client ID # GitHub Client ID clientSecret: 我的 Secret # GitHub Client Secret 保存。 $ hexo clean #以下两条命令默认你是把你的hexo托管在github上： $ git commit -a $ git push 然后你就拥有了一个 gitalk 匿名评论区。虽说也得注册账号，但只需要程序员们人人都有的 github 账号就可以了。 这些方法对于防止公权力的滥用来说是远远不够的，因为你总得在公权力的眼皮子底下传播你的链接。如果你搞的事儿足够大，他们不需要在墙外解决问题，只需要在墙内溯源第一个发布链接的人就行。 但是，这个办法可以稍微提高一点追踪成本，也能让被公权力以及被天天作死的你整得神经过敏的境内私人服务提供商稍微松口气，还能让你的评论区不由境内私人服务提供商进行过分严格的审核，何乐而不为呢？ 黎想2020年6月13日于家中","categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"https://stblog.penclub.club/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"2018荣耀magicbook锐龙版archlinux卡死解决方案","slug":"Magicbook","date":"2020-05-13T20:37:55.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"2020/Magicbook/","link":"","permalink":"https://stblog.penclub.club/2020/Magicbook/","excerpt":"我的2018款魔法书锐龙版对linux的兼容性极差。","text":"我的2018款魔法书锐龙版对linux的兼容性极差。 deepin v15（注：2018款魔法书均预装windows，2019才有deepin pro）直接调不了背光。 opensuse tumbleweed运行中卡死，只能强制重启。 ubuntu同上。 kde neon、kubuntu、manjaro、archlinux同上。 最近才在华为论坛上找到办法，作者则是在archwiki上看到的。不过作者打字水平不太好，文内有多处错误，我搞了之后大致如下：/etc/mkinitcpio.conf …… MODULES=(amdgpu radeon) …… 据wiki说在modules里面按顺序填上amdgpu radeon即可解决。不过在此之前我按华为论坛上作者的办法（只填amdgpu）问题依旧。我如此修改以后问题出现的频率有所减少，但依旧存在。 同时，通过经验我还发现，电脑卡死的现象与过热存在一定的相关性。因此，我安装了tlp和tlpui-git（为tlp开发的一个GUI），并将各项设置调为“优先节能（power）”，目前过热的现象大大减少，卡死的现象暂未出现。(在此以后卡死现象依旧存在——5.16修订) 不过我觉得大概还是治标不治本。这篇文章会经常更新。 修订于2020年5月15日 经过多方查找如bugzilla、manjaro forum，我决定： 修改内核参数 /etc/default/grub …… GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash ……&quot; 改为“noacpi nosplash idle=nomwait irqpoll ……” …… 然后sudo grub-mkconfig -o /boot/grub/grub.cfg 禁用C6状态 $ yay zenstates-git # vim /etc/modules-load.d/modules.conf（可能是新文件）加入如下单词：“msr”。 # vim /etc/systemd/system/disable_c6.service （新文件） 内容如下： [Unit] Description=Ryzen Disable C6 DefaultDependencies=no After=sysinit.target local-fs.target Before=basic.target [Service] Type=oneshot ExecStart=/usr/bin/zenstates --c6-disable [Install] WantedBy=basic.target 然后 # systemctl enable disable_c6.service 最后重启。 这是我病急乱投医综合三四个回答的结果。修改后，目前暂时一切正常。 修订于2020年5月16日 然而并没有。 于是我把kde的混成器设置从OpenGL3.1改成了2.0，现在暂时没事了。 然后还有吧友提供了另一个方案 （/etc/default/grub）： acpi_osi=\\&quot;Windows 2015\\&quot; reboot=kbd ivrs_ioapic[32]=00:14.0 amd_iommu=on idle=nomwait amdgpu.vm_fragment_size=9 initrd=/boot/amd-ucode.img 然后sudo grub-mkconfig -o /boot/grub/grub.cfg 修订于2020年5月26日 然而还是有问题！！！！！！！ 然后我又找到了一个内核参数，使用方法同上，加入 /etc/default/grub里然后 grub-mkconfig -o /boot/grub/grub.cfg吧： amdgpu.noretry=0 修订于 2020 年 5 月 27 日 目前问题再未复现。可认为已经得到彻底解决。加上笔记本即将卖出，本文宣布完结。 几个关键点： 设置 idle=nomwait 或禁用 C6 。 将混成器由 OpenGL3.1 改为 2.0。 修订于 2020 年 6 月 12 日","categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"https://stblog.penclub.club/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"如何在15分钟内开起自己的博客","slug":"如何在15分钟内开起自己的博客","date":"2020-02-29T19:20:39.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"2020/如何在15分钟内开起自己的博客/","link":"","permalink":"https://stblog.penclub.club/2020/%E5%A6%82%E4%BD%95%E5%9C%A815%E5%88%86%E9%92%9F%E5%86%85%E5%BC%80%E8%B5%B7%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"1、找Hexo主题，丢上Github仓库1。2.1（二选一之一）、生成RSA公私钥对，私钥放仓库1 Secrets。新建仓库2，命名为用户名.github.io。公钥放仓库2 Deploy Key。2.2、配置config.yml，使用现成Github Action“Hexo Deploy”。2.3、完成。 3.1（二选一之二）、使用netlify，使用github账户登录，导入仓库1.3.2、完成。 4.1、其实也可以两个都搞。","categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"https://stblog.penclub.club/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"第一篇文章","slug":"第一篇","date":"2020-02-22T20:20:00.000Z","updated":"2021-06-29T03:58:28.219Z","comments":true,"path":"2020/第一篇/","link":"","permalink":"https://stblog.penclub.club/2020/%E7%AC%AC%E4%B8%80%E7%AF%87/","excerpt":"","text":"那么这里就是黎想的第114514个博客了。 感谢github，它让我能获取代码感谢Netlify，它帮助部署网站感谢Hexo-Themes-Sakura还有Hexo。 以及Richard Matthew Stallman等等为自由软件运动或开源软件运动奋斗的人们","categories":[],"tags":[{"name":"通知类及其它","slug":"通知类及其它","permalink":"https://stblog.penclub.club/tags/%E9%80%9A%E7%9F%A5%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%AE%83/"}]}],"categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"https://stblog.penclub.club/tags/%E6%95%99%E7%A8%8B/"},{"name":"随想","slug":"随想","permalink":"https://stblog.penclub.club/tags/%E9%9A%8F%E6%83%B3/"},{"name":"分析","slug":"分析","permalink":"https://stblog.penclub.club/tags/%E5%88%86%E6%9E%90/"},{"name":"通知类及其它","slug":"通知类及其它","permalink":"https://stblog.penclub.club/tags/%E9%80%9A%E7%9F%A5%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%AE%83/"}]}